# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import rro_pb2 as rro__pb2


class ChkIncomeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.sendChk = channel.unary_unary(
            '/com.programika.rro.ws.chk.ChkIncomeService/sendChk',
            request_serializer=rro__pb2.Check.SerializeToString,
            response_deserializer=rro__pb2.CheckResponse.FromString,
        )
        self.sendChkV2 = channel.unary_unary(
            '/com.programika.rro.ws.chk.ChkIncomeService/sendChkV2',
            request_serializer=rro__pb2.Check.SerializeToString,
            response_deserializer=rro__pb2.CheckResponse.FromString,
        )
        self.lastChk = channel.unary_unary(
            '/com.programika.rro.ws.chk.ChkIncomeService/lastChk',
            request_serializer=rro__pb2.CheckRequest.SerializeToString,
            response_deserializer=rro__pb2.CheckResponse.FromString,
        )
        self.ping = channel.unary_unary(
            '/com.programika.rro.ws.chk.ChkIncomeService/ping',
            request_serializer=rro__pb2.Check.SerializeToString,
            response_deserializer=rro__pb2.CheckResponse.FromString,
        )
        self.delLastChk = channel.unary_unary(
            '/com.programika.rro.ws.chk.ChkIncomeService/delLastChk',
            request_serializer=rro__pb2.CheckRequest.SerializeToString,
            response_deserializer=rro__pb2.CheckResponse.FromString,
        )
        self.delLastChkId = channel.unary_unary(
            '/com.programika.rro.ws.chk.ChkIncomeService/delLastChkId',
            request_serializer=rro__pb2.CheckRequestId.SerializeToString,
            response_deserializer=rro__pb2.CheckResponse.FromString,
        )
        self.statusRro = channel.unary_unary(
            '/com.programika.rro.ws.chk.ChkIncomeService/statusRro',
            request_serializer=rro__pb2.CheckRequest.SerializeToString,
            response_deserializer=rro__pb2.StatusResponse.FromString,
        )
        self.infoRro = channel.unary_unary(
            '/com.programika.rro.ws.chk.ChkIncomeService/infoRro',
            request_serializer=rro__pb2.CheckRequest.SerializeToString,
            response_deserializer=rro__pb2.RroInfoResponse.FromString,
        )


class ChkIncomeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def sendChk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendChkV2(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def lastChk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delLastChk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delLastChkId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def statusRro(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def infoRro(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChkIncomeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'sendChk': grpc.unary_unary_rpc_method_handler(
            servicer.sendChk,
            request_deserializer=rro__pb2.Check.FromString,
            response_serializer=rro__pb2.CheckResponse.SerializeToString,
        ),
        'sendChkV2': grpc.unary_unary_rpc_method_handler(
            servicer.sendChkV2,
            request_deserializer=rro__pb2.Check.FromString,
            response_serializer=rro__pb2.CheckResponse.SerializeToString,
        ),
        'lastChk': grpc.unary_unary_rpc_method_handler(
            servicer.lastChk,
            request_deserializer=rro__pb2.CheckRequest.FromString,
            response_serializer=rro__pb2.CheckResponse.SerializeToString,
        ),
        'ping': grpc.unary_unary_rpc_method_handler(
            servicer.ping,
            request_deserializer=rro__pb2.Check.FromString,
            response_serializer=rro__pb2.CheckResponse.SerializeToString,
        ),
        'delLastChk': grpc.unary_unary_rpc_method_handler(
            servicer.delLastChk,
            request_deserializer=rro__pb2.CheckRequest.FromString,
            response_serializer=rro__pb2.CheckResponse.SerializeToString,
        ),
        'delLastChkId': grpc.unary_unary_rpc_method_handler(
            servicer.delLastChkId,
            request_deserializer=rro__pb2.CheckRequestId.FromString,
            response_serializer=rro__pb2.CheckResponse.SerializeToString,
        ),
        'statusRro': grpc.unary_unary_rpc_method_handler(
            servicer.statusRro,
            request_deserializer=rro__pb2.CheckRequest.FromString,
            response_serializer=rro__pb2.StatusResponse.SerializeToString,
        ),
        'infoRro': grpc.unary_unary_rpc_method_handler(
            servicer.infoRro,
            request_deserializer=rro__pb2.CheckRequest.FromString,
            response_serializer=rro__pb2.RroInfoResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'com.programika.rro.ws.chk.ChkIncomeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class ChkIncomeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def sendChk(request,
                target,
                options=(),
                channel_credentials=None,
                call_credentials=None,
                insecure=False,
                compression=None,
                wait_for_ready=None,
                timeout=None,
                metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.programika.rro.ws.chk.ChkIncomeService/sendChk',
                                             rro__pb2.Check.SerializeToString,
                                             rro__pb2.CheckResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendChkV2(request,
                  target,
                  options=(),
                  channel_credentials=None,
                  call_credentials=None,
                  insecure=False,
                  compression=None,
                  wait_for_ready=None,
                  timeout=None,
                  metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.programika.rro.ws.chk.ChkIncomeService/sendChkV2',
                                             rro__pb2.Check.SerializeToString,
                                             rro__pb2.CheckResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def lastChk(request,
                target,
                options=(),
                channel_credentials=None,
                call_credentials=None,
                insecure=False,
                compression=None,
                wait_for_ready=None,
                timeout=None,
                metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.programika.rro.ws.chk.ChkIncomeService/lastChk',
                                             rro__pb2.CheckRequest.SerializeToString,
                                             rro__pb2.CheckResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ping(request,
             target,
             options=(),
             channel_credentials=None,
             call_credentials=None,
             insecure=False,
             compression=None,
             wait_for_ready=None,
             timeout=None,
             metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.programika.rro.ws.chk.ChkIncomeService/ping',
                                             rro__pb2.Check.SerializeToString,
                                             rro__pb2.CheckResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delLastChk(request,
                   target,
                   options=(),
                   channel_credentials=None,
                   call_credentials=None,
                   insecure=False,
                   compression=None,
                   wait_for_ready=None,
                   timeout=None,
                   metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.programika.rro.ws.chk.ChkIncomeService/delLastChk',
                                             rro__pb2.CheckRequest.SerializeToString,
                                             rro__pb2.CheckResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delLastChkId(request,
                     target,
                     options=(),
                     channel_credentials=None,
                     call_credentials=None,
                     insecure=False,
                     compression=None,
                     wait_for_ready=None,
                     timeout=None,
                     metadata=None):
        return grpc.experimental.unary_unary(request, target,
                                             '/com.programika.rro.ws.chk.ChkIncomeService/delLastChkId',
                                             rro__pb2.CheckRequestId.SerializeToString,
                                             rro__pb2.CheckResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def statusRro(request,
                  target,
                  options=(),
                  channel_credentials=None,
                  call_credentials=None,
                  insecure=False,
                  compression=None,
                  wait_for_ready=None,
                  timeout=None,
                  metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.programika.rro.ws.chk.ChkIncomeService/statusRro',
                                             rro__pb2.CheckRequest.SerializeToString,
                                             rro__pb2.StatusResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def infoRro(request,
                target,
                options=(),
                channel_credentials=None,
                call_credentials=None,
                insecure=False,
                compression=None,
                wait_for_ready=None,
                timeout=None,
                metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.programika.rro.ws.chk.ChkIncomeService/infoRro',
                                             rro__pb2.CheckRequest.SerializeToString,
                                             rro__pb2.RroInfoResponse.FromString,
                                             options, channel_credentials,
                                             insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
